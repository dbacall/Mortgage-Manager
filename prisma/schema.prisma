// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Client {
    id        String     @id @default(cuid())
    firstName String
    lastName  String
    email     String?    @unique
    phone     String?
    companyId String?
    mortgages Mortgage[]
}

model Mortgage {
    id                    String        @id @default(cuid())
    interestType          InterestType?
    purchaseType          PurchaseType?
    firstLineOfAddress    String?
    city                  String?
    postcode              String?
    purchaseDate          DateTime?
    renewalDate           DateTime?
    initialMortgageAmount Int?
    companyId             String?
    clientId              String
    client                Client        @relation(fields: [clientId], references: [id])
}

model User {
    id                  String             @id @default(cuid())
    name                String?
    firstName           String?
    lastName            String?
    email               String?            @unique
    emailVerified       DateTime?
    image               String?
    accounts            Account[]
    sessions            Session[]
    companyId           String?
    company             Company?           @relation(fields: [companyId], references: [id])
    companyMembershipId String?
    companyMembership   CompanyMembership?
}

model Company {
    id                String              @id @default(cuid())
    name              String
    members           User[]
    CompanyMembership CompanyMembership[]
}

enum MembershipType {
    ADMIN
    USER
}

model CompanyMembership {
    id        String         @id @default(cuid())
    userId    String         @unique
    user      User           @relation(fields: [userId], references: [id])
    companyId String
    company   Company        @relation(fields: [companyId], references: [id])
    type      MembershipType
}

enum InterestType {
    FIXED
    VARIABLE
}

enum PurchaseType {
    HOMEOWNER
    BUY_TO_LET
    COMMERCIAL
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
